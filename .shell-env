# --------------------------------------------------------------------------
umask 022

export BROWSER=open
export EDITOR=vim
export VISUAL=vim
export PAGER=less
export LSCOLORS="Gxfxcxdxbxegedabagacad"
export LESS="iRQXF"
export GREP_OPTIONS='--color=auto'
export HISTSIZE=100000

command -v ag >/dev/null 2>/dev/null && export FZF_DEFAULT_COMMAND='ag -l -g ""'


# --------------------------------------------------------------------------
# ruby

if [[ ! -d "$HOME/.rvm/bin" ]] ; then
  if [[ -d "/usr/local/opt/rbenv/bin" ]] ; then
    export RBENV_ROOT="/usr/local/opt/rbenv"
  elif [[ -d "$HOME/.rbenv/bin" ]] ; then
    export RBENV_ROOT="$HOME/.rbenv"
  fi
fi
# --------------------------------------------------------------------------
if [[ "$BASH_VERSINFO" -gt "3" || -n $ZSH_VERSION ]] ; then
  declare -a __messy_path
  declare -a __cleaned_path
  declare -A __path_check

  # rvm is super picky about being first
  if [[ -d "$HOME/.rvm/bin" ]] ; then
    __messy_path+=($HOME/.rvm/bin)
  elif [[ -n $RBENV_ROOT ]] ; then
    __messy_path+=($RBENV_ROOT/bin)
  fi

  # Setup the path to be in a preferred order, but don't overwrite the existing path
  __messy_path+=(/Applications/VMware\ Fusion.app/Contents/Library /{usr,opt}/{local,X11}/{bin,sbin} /{usr,opt}/local/{heroku}/bin $HOME/bin)
  __messy_path+=($(IFS=:; echo $PATH))
  __messy_path+=(/{usr,opt}/{bin,sbin} /{bin,sbin})

  for p in "${__messy_path[@]}" ; do
    [[ -d "$p" && -z "${__path_check[$p]}" ]] || continue
    __path_check[$p]=1
    __cleaned_path+=($p)
  done

  PATH=$(IFS=:; echo "${__cleaned_path[*]}")
  unset __messy_path
  unset __cleaned_path
  unset __path_check
fi

export PATH
# --------------------------------------------------------------------------
# ruby, prefer rvm over rbenv

if [[ -d "$HOME/.rvm/bin" ]] ; then
  source "$HOME/.rvm/scripts/rvm"
elif [[ -n $RBENV_ROOT ]] ; then
  if [[ -n $ZSH_VERSION ]] ; then
    eval "$(rbenv init - zsh)"
  else
    eval "$(rbenv init -)"
  fi
fi
# --------------------------------------------------------------------------
# Synology NAS

[[ -d "/usr/syno" ]] && export TERM=${TERM:-cons25}

# --------------------------------------------------------------------------
# gpg-agent, only for linux, on OS X use gpgtools instead

command -v gpg-agent >/dev/null 2>/dev/null && if [[ "${OSTYPE:0:5}" = "linux" ]] ; then
  __gai="$HOME/.gnupg/gpg-agent-info"

  [[ -z $GPG_AGENT_INFO ]] && [[ -f $__gai ]] && source $__gai

  [[ -n $GPG_AGENT_INFO ]] && [[ -S $(echo $GPG_AGENT_INFO | cut -f 1 -d :) ]] || unset GPG_AGENT_INFO

  [[ -z $GPG_AGENT_INFO ]] && eval $(gpg-agent --daemon --write-env-file $__gai)

  [[ -n $GPG_AGENT_INFO ]] && [[ -S $(echo $GPG_AGENT_INFO | cut -f 1 -d :) ]] && export GPG_AGENT_INFO
fi

# --------------------------------------------------------------------------
# ssh-agent, only for OS X

if [[ -n $SSH_AUTH_SOCK && -S $SSH_AUTH_SOCK ]] ; then
  if [[ "${OSTYPE:0:6}" = "darwin" ]] ; then
    declare -i _ssh_major_ver
    declare -i _ssh_minor_ver
    ssh -V 2>&1 | sed -e 's/^[a-zA-Z]*_\([1-9][0-9]*\)\.\([0-9][0-9]*\).*$/\1 \2/' | read _ssh_major_ver _ssh_minor_ver

    if (( (_ssh_major_ver = 6 && _ssh_minor_ver >= 6) || _ssh_major_ver >= 7 )) ; then
      ssh-add -m -M >&/dev/null
    elif (( _ssh_major_ver = 6 && _ssh_minor_ver < 6 )) ; then
      ssh-add -A -K >&/dev/null
    fi
  fi
fi

# --------------------------------------------------------------------------
# vim: ft=sh sw=2 ts=2 et

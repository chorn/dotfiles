# --------------------------------------------------------------------------
umask 022

# export LC_COLLATE=C
export BROWSER=open
export EDITOR=vim
export VISUAL=vim
export PAGER=less
export LESS="iRQXF"
export HISTSIZE=100000
export MAILCHECK=0
export SHELLCHECK_OPTS="--shell=bash --exclude=SC2001,SC1090,SC2164,SC2068"
export GOPATH="$HOME/.go"

if [[ "${OSTYPE:0:6}" = "darwin" ]] ; then
  export LSCOLORS="Gxfxcxdxbxegedabagacad"
elif [[ "${OSTYPE:0:5}" = "linux" ]] ; then
  export LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=01;33;01:or=01;31;01:mi=00:su=01;41:sg=01;43:ca=01;41:tw=01;32:ow=01;32:st=01;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'
fi

if [[ -n "$TMUX" ]] ; then
  echo $TMUX | grep -q tmate && alias tmux=tmate
fi

if command -v rg >&/dev/null ; then
 export RIPGREP_DEFAULT_GLOB='--glob "!.git/*" --glob "!_build/*" --glob "!deps/*" --glob "!.DS_Store" --glob "!log/*" --glob "!tmp/*" --glob "!vendor/*" --glob "!.keep"'
 export FZF_DEFAULT_COMMAND="rg --files --no-ignore --hidden --follow ${RIPGREP_DEFAULT_GLOB}"
elif command -v ag >&/dev/null ; then
  export FZF_DEFAULT_COMMAND='ag --files-with-matches --filename-pattern ""'
else
  export FZF_DEFAULT_COMMAND=''
fi

export FZF_DEFAULT_OPTS="--inline-info --preview-window=right"

# --------------------------------------------------------------------------
# Synology NAS

if [[ -d "/usr/syno" ]] ; then
  export TERM=${TERM:-cons25}
  [[ -s "$HOME/.certs/curl-cacert.pem" ]] && export CURL_CA_BUNDLE="$HOME/.certs/curl-cacert.pem"
fi
# --------------------------------------------------------------------------
# gpg-agent, only for linux, on OS X use gpgtools instead

__setup-gpg-agent() {
  command -v gpg >/dev/null 2>/dev/null || return

  if [[ -n "$ZSH_VERSION" && -n "$TTY" ]] ; then
    export GPG_TTY="$TTY"
  else
    export GPG_TTY=$(tty)
  fi

  command -v gpg-agent >/dev/null 2>/dev/null || return

  __gav=$(gpg-agent --version | head -1 | cut -f 3 -d ' ')
  __gai="$HOME/.gnupg/gpg-agent-info"

  # [[ "${__gav:0:3}" != "2.1"  ]] && return
  # if [[ "${__gav:0:3}" == "2.2.1"  ]] ; then
  #   [[ -z "$GPG_AGENT_INFO" ]] && eval "$(gpg-agent --daemon)"
  # fi

  [[ -z "$GPG_AGENT_INFO" ]] && [[ -f "$__gai" ]] && source "$__gai"
  [[ -n "$GPG_AGENT_INFO" && -S $(echo "$GPG_AGENT_INFO" | cut -f 1 -d :) ]] || unset GPG_AGENT_INFO

  if [[ "${__gav:0:3}" != "2.2.1"  ]] ; then
    [[ -z "$GPG_AGENT_INFO" ]] && eval "$(gpg-agent --daemon)"
  else
    [[ -z "$GPG_AGENT_INFO" ]] && eval "$(gpg-agent --daemon --write-env-file "$__gai")"
  fi

  [[ -n "$GPG_AGENT_INFO" ]] && [[ -S $(echo "$GPG_AGENT_INFO" | cut -f 1 -d :) ]] && export GPG_AGENT_INFO
}

[[ "${OSTYPE:0:5}" = "linux" ]] && __setup-gpg-agent
  

# --------------------------------------------------------------------------
# ssh-agent, only for OS X

if [[ -z "$_SSH_MAJOR_VER" && -z "$_SSH_MINOR_VER" ]] ; then
  if command -v ssh >/dev/null 2>/dev/null ; then
    declare -i _SSH_MAJOR_VER
    declare -i _SSH_MINOR_VER
    read -r _SSH_MAJOR_VER _SSH_MINOR_VER < <(ssh -V 2>&1 | sed -e 's/^[a-zA-Z]*_\([1-9][0-9]*\)\.\([0-9][0-9]*\).*$/\1 \2/')
    export _SSH_MAJOR_VER _SSH_MINOR_VER
  fi
fi

if [[ "${OSTYPE:0:6}" = "darwin" && -n "$_SSH_MAJOR_VER" && -n "$_SSH_MINOR_VER" && -n "$SSH_AUTH_SOCK" && -S "$SSH_AUTH_SOCK" ]] ; then
  if (( (_SSH_MAJOR_VER = 6 && _SSH_MINOR_VER >= 6) || _SSH_MAJOR_VER >= 7 )) ; then
    ssh-add -m -M >&/dev/null
  elif (( _SSH_MAJOR_VER = 6 && _SSH_MINOR_VER < 6 )) ; then
    ssh-add -A -K >&/dev/null
  fi
fi

if [[ -n "$SSH_AUTH_SOCK" && ! -S "$SSH_AUTH_SOCK" ]] ; then
  SSH_AUTH_SOCK=$(find /tmp -maxdepth 2 -type s -path '/tmp/ssh-*' 2>/dev/null | head -1)
  [[ -z "$SSH_AUTH_SOCK" || ! -S "$SSH_AUTH_SOCK" ]] && unset SSH_AUTH_SOCK
  export SSH_AUTH_SOCK
fi

# --------------------------------------------------------------------------
[[ -z "$PS1" ]] && return
[[ "${XPC_SERVICE_NAME:0:13}" == "com.jetbrains" ]] && return  # RubyyMine etc...
# --------------------------------------------------------------------------
if [[ -s "$HOME/.config/base16-shell/profile_helper.sh" ]] ; then
  export BASE16_SHELL="$HOME/.config/base16-shell"
  eval "$("$BASE16_SHELL"/profile_helper.sh)"
fi

# --------------------------------------------------------------------------
# vim: set syntax=sh ft=sh sw=2 ts=2 expandtab:

#!/usr/bin/env bash
#-----------------------------------------------------------------------------
# vim: set syntax=sh ft=sh sw=2 ts=2 expandtab:
# shellcheck disable=SC2184
#-----------------------------------------------------------------------------
set -euo pipefail

_rsync() {
  local -a _args=(
    --archive
    --delete
    --human-readable
    --info='nonreg1,copy0,del0,flist0,misc2,name0,stats0,symsafe0,progress2'
    --inplace
    --no-compress
    --one-file-system
    --open-noatime
    --size-only
    --sparse
    --whole-file
    --ignore-missing-args
    --filter='- .DS_Store'
    --filter='- @eaDir/'
    --filter='- @tmp/'
    --filter='- logs/'
    --filter='- tmp/'
    --filter='- *.log.*'
    --filter='- *cache*'
    --filter='- *Cache*'
  )

  if command -v free >&/dev/null; then
    local _mem=$(($(free -g | grep Mem | sed -re 's/^Mem:\s+//' -e 's/\s+.*$//') / 3))G
    _args+=(--max-alloc="$_mem")
  fi

  if [[ -z "$*" ]]; then
    echo "No args for rsync provided. Defaults:"
    declare -p _args
    return 1
  fi

  # set -x
  rsync "${_args[@]}" "${@}"
}

# declare -a _args=("$@")
# for ((i = 0; i < $#; i++)); do
#   if [[ "${_args[$i]}" == '--xargs' ]]; then
#     unset _args[$i]
#
#   fi

declare -a _args=()
declare _xargs=0

for _arg in "$@"; do
  if [[ "${_arg}" == "--xargs" ]]; then
    _xargs=1
  else
    _args+=("${_arg}")
  fi
done

if ((_xargs)); then
  declare _dest=${_args[0]}
  unset _args[0]
  _args+=("$_dest")
fi

_rsync "${_args[@]}"

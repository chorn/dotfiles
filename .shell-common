#!/usr/bin/env bash

# Aliases & Functions for Interactive shells -------------------------------

[[ -z "$PS1" ]] && return

# OS X ---------------------------------------------------------------------
if [[ "${OSTYPE:0:6}" = "darwin" ]] ; then
  alias ls="/bin/ls -FG"
  alias l="ls -lO"
  alias p="ps -Af"
  alias update_brew="brew update --all && brew upgrade --all && brew prune && brew cleanup && brew outdated"
  alias rebuild_launch_services="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user"
  alias start="simple_launchctl load"
  alias stop="simple_launchctl unload"
  simple_launchctl() { find ~/Library/LaunchAgents -name '*.plist' -name '*'"$2"'*' -ok launchctl "$1" -w {} \; ; }
  [[ -x "/Applications/LibreOffice.app/Contents/MacOS/soffice" ]] && alias soffice="/Applications/LibreOffice.app/Contents/MacOS/soffice"
  [[ -x "/usr/local/opt/macvim/MacVim.app/Contents/MacOS/Vim"  ]] && alias vim="/usr/local/opt/macvim/MacVim.app/Contents/MacOS/Vim"
# Linux ---------------------------------------------------------------------
elif [[ "${OSTYPE:0:5}" = "linux" ]] ; then
  alias ls="/bin/ls --color=auto -F"
  alias l="ls -l"
  alias p="ps auxOU"
  alias agu="sudo apt-get update -qq; sudo aptitude safe-upgrade"
  alias ubuntu_add_key='sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80'
fi
# ---------------------------------------------------------------------------
if [[ -d "/usr/syno" ]] ; then
  if [[ "$(which ps)" == "/usr/bin/ps" ]] ; then
    alias p="ps w"
  fi
fi
# ---------------------------------------------------------------------------
if command -v ag >/dev/null 2>/dev/null ; then
  alias ag="ag --pager=less --color-match='1;36'"
  alias ag_next='g $(git diff --name-only master..HEAD . | sed -e "s/^/ --ignore=/")'
fi
# ---------------------------------------------------------------------------
if command -v jrnl >/dev/null 2>/dev/null ; then
  alias j='jrnl'
  alias j_recent="jrnl -from \"\$(gdate --date 'yesterday' +'%F %H:%M')\" "
  alias j_last='jrnl -from "$([[ $(date +%u) -eq 1 ]] && echo friday || echo yesterday)"'
fi
# ---------------------------------------------------------------------------
alias list_to_regex="sed -e 's/[^0-9]//g' | tr '\n' '|' | sed -e 's/^/(/' -e 's/\|$/)/'"
alias m='$PAGER'
alias l1="ls -1"
alias ll="l -A"
alias la="ls -A"
alias live_ip='dig +short myip.opendns.com @resolver1.opendns.com || curl -f4L http://ifconfig.me'
alias to_csv='soffice --convert-to csv --headless'
# alias predate="xargs -I{} bash -c \"printf '%(%F %T)T ' -1 ; echo '{}'\""
# ---------------------------------------------------------------------------
predate() {
  while read -r line ; do
    printf '%(%F %T)T %s\n' -1 "$line"
  done
}

total() {
  tr '\n' '+' | sed -e 's/^/(/' -e 's/\+$/\)/'  | bc -q
}

downloaded_in() {
  for f in "$@" ; do stat -r "$f" | awk '{print ($11 - $12) " seconds"}' ; done
}

# MySQL ---------------------------------------------------------------------
alias mydump="mysqldump --allow-keywords --add-locks --hex-blob --max_allowed_packet=1G --lock-tables=false --lock-all-tables=false --quick --quote-names --complete-insert=false --extended-insert=false"
# Ruby ---------------------------------------------------------------------
alias be="bundle exec"

httpd() {
  port="${1:-8000}"
  command -v open >/dev/null 2>/dev/null && (sleep 1 && open "http://127.0.0.1:$port" &)
  ruby -run -e httpd . -p "$port"
}
# Git ---------------------------------------------------------------------
alias pubgit='git --git-dir="$HOME/.git-pub-dotfiles" --work-tree="$HOME"'
alias prvgit='git --git-dir="$HOME/.git-prv-dotfiles" --work-tree="$HOME"'
alias gst='git status'
alias gcam='git commit --all --verbose --message'
alias gco='git checkout'
alias gps='git push'
alias gpl='git pull'

confsync() {
  cd ~
  for host in "$@" ; do
    pubgit ls-files | rsync -iaxR --files-from=- . "${host//":"/}:"
    prvgit ls-files | rsync -iaxR --files-from=- . "${host//":"/}:"
  done
}

#-----------------------------------------------------------------------------
kernel_purge() {
  local _removed
  _removed=($(dpkg -l 'linux-*' | grep '^rc' | cut -f 3 -d ' '))
  local _vcurrent
  _vcurrent=$(uname -r | sed -re 's/-[a-z]+$//')
  local _vnewest
  _vnewest=$(dpkg -l 'linux-image-*' | grep -E '^ii +linux-image-[[:digit:]]+\.[[:digit:]]+\.' | sed -e 's/^.*linux-image-//' -e 's/ .*$//' | tail -1 | sed -re 's/-[a-z]+$//')
  local _old
  _old=($(dpkg -l 'linux-*' | grep -E '^ii +linux-[^ ]+-[[:digit:]]+\.[[:digit:]]+\.' | grep -Ev "(${_vcurrent}|${_vnewest})" | cut -f 3 -d ' '))

  [[ -n ${_removed[@]} ]] && sudo apt-get purge "${_removed[@]}"
  [[ -n ${_old[@]} ]]     && sudo apt-get purge "${_old[@]}"
}
# tmux ---------------------------------------------------------------------
alias tatt='tmux attach -t $USER || tmux new -s $USER'

tnew() {
  local h="$1"
  [[ -z $h ]] && return
  tmux neww -n "$h" "exec ssh ${h}"
}

tneww() {
  local h="$1"
  [[ -z $h ]] && return
  tmux neww -n "${h}.1" "exec ssh ${h}"
  tmux neww -n "${h}.2" "exec ssh ${h}"
}
# openssl ---------------------------------------------------------------------
newssl() {
  local h="$1"
  [[ -z $h ]] && return
  local key="${h}.key"
  local req="${h}.req"
  local crt="${h}.crt"
  local pem="${h}.pem"
  cat <<-REQ > "${req}"
      [req]
      distinguished_name = dn
      x509_extensions    = exts
      prompt             = no
      [dn]
      C                  = US
      ST                 = New York
      L                  = Rochester
      OU                 = ${h}
      CN                 = ${h}
      [exts]
      subjectAltName     = @alts
      [alts]
      DNS.1              = ${h}
REQ

  openssl genrsa -out "${key}" 4096 >&/dev/null
  openssl req -new -x509 -days 3650 -utf8 -sha512 -key "${key}" -out "${crt}" -reqexts exts -batch -config "${req}"
  cat "${crt}" "${key}" > "${pem}" && rm "${key}" "${crt}" "${req}"
}

ssl_pin_sha256() {
  local _cert="$1"
  local _tmp="${HOME}/.$$.key"
  openssl x509 -noout -in "${_cert}" -pubkey | openssl asn1parse -noout -inform pem -out "$_tmp"
  openssl dgst -sha256 -binary "$_tmp" | openssl enc -base64
  rm "$_tmp"
}

#-----------------------------------------------------------------------------
# date_diff() {
#   local _start_date="$1"
#   local _stop_date="$2"
#
#   [[ -n "$_start_date" && -n "$_stop_date" ]] || return
#
#   local _date1
#   local _date2
#
#   if [[ -n "$ZSH_VERSION" ]] ; then
#     command -v strftime >&/dev/null || zmodload zsh/datetime
#     strftime -s _date1 -r '%Y-%m-%d %H:%M:%S' "$_start_date"
#     strftime -s _date2 -r '%Y-%m-%d %H:%M:%S' "$_stop_date"
#   elif [[ "${OSTYPE:0:6}" = "darwin" ]] ; then
#     _date1=$(date -f '%Y-%m-%d %H:%M:%S' -j "$_start_date" +'%s')
#     _date2=$(date -f '%Y-%m-%d %H:%M:%S' -j "$_stop_date" +'%s')
#   else
#     _date1=$(date --date "$_start_date" +'%s')
#     _date2=$(date --date "$_stop_date" +'%s')
#   fi
#
#   [[ -n "$_date1" && -n "$_date2" ]] || return
#
#   echo $((_date2 - _date1))
# }
#
# date_range() {
#   local _start_date="$1"
#   local _stop_date="$2"
#
#   [[ -n "$_start_date" && -n "$_stop_date" ]] || return
#
#   local _range
#   _range=$(date_diff "$1" "$2")
#
#   if ((_range < 0)); then
#     _range=$(( _range * -1 ))
#   fi
#
#   if [[ -n "$ZSH_VERSION" ]] ; then
#     command -v strftime >&/dev/null || zmodload zsh/datetime
#     strftime '%Y-%m-%d %H:%M:%S' "$_range"
#   elif [[ -n "$BASH_VERSION" ]] ; then
#     printf '%(%Y-%m-%d %H:%M:%S)T' "$_range"
#   elif [[ "${OSTYPE:0:6}" = "darwin" ]] ; then
#     date -f '%s' -j "$_range" +'%Y-%m-%d %H:%M:%S'
#   else
#     date --date "@${_range}" +'%Y-%m-%d %H:%M:%S)
#   fi
#
#   # for i in $(seq 0 "$range") ; do
#   #  $_date --date "$1 $i day" +'%Y-%m-%d'
#   # done
# }
#-----------------------------------------------------------------------------
[[ -s "$HOME/.shell-prv" ]] && source "$HOME/.shell-prv"
# --------------------------------------------------------------------------
# vim: set syntax=sh ft=sh sw=2 ts=2 expandtab:

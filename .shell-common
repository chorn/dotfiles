# Aliases & Functions for Interactive shells -------------------------------

# OS X ---------------------------------------------------------------------
if [[ "${OSTYPE:0:6}" = "darwin" ]] ; then
  alias ls="/bin/ls -FG"
  alias l="ls -lO"
  alias p="ps -Af"
  alias update_brew="brew update --all && brew upgrade && brew prune && brew cleanup && brew outdated"
  alias rebuild_launch_services="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user"
  alias start="simple_launchctl load"
  alias stop="simple_launchctl unload"
  simple_launchctl() { find ~/Library/LaunchAgents -name '*.plist' -name '*'"$2"'*' -ok launchctl "$1" -w {} \; ; }
  [[ -x "/Applications/LibreOffice.app/Contents/MacOS/soffice" ]] && alias soffice="/Applications/LibreOffice.app/Contents/MacOS/soffice"
# Linux ---------------------------------------------------------------------
elif [[ "${OSTYPE:0:5}" = "linux" ]] ; then
  alias ls="/bin/ls --color=auto -F"
  alias l="ls -l"
  alias p="ps auxOU"
  alias agu="sudo apt-get update -qq; sudo aptitude safe-upgrade"
  alias ubuntu_add_key='sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80'
fi
# ---------------------------------------------------------------------------
if [[ -d "/usr/syno" ]] ; then
  if [[ "$(which ps)" == "/usr/bin/ps" ]] ; then
    alias p="ps w"
  fi
fi
# ---------------------------------------------------------------------------
if command -v ag >/dev/null 2>/dev/null ; then
  alias ag="ag --pager=less --color-match='1;36'"
  alias ag_next='g $(git diff --name-only master..HEAD . | sed -e "s/^/ --ignore=/")'
fi
# ---------------------------------------------------------------------------
alias list_to_regex="sed -e 's/[^0-9]//g' | tr '\n' '|' | sed -e 's/^/(/' -e 's/\|$/)/'"
alias m='$PAGER'
alias l1="ls -1"
alias ll="l -A"
alias la="ls -A"
alias live_ip='dig +short myip.opendns.com @resolver1.opendns.com || curl -f4L http://ifconfig.me'
alias to_csv='soffice --convert-to csv --headless'
# alias predate="xargs -I{} bash -c \"printf '%(%F %T)T ' -1 ; echo '{}'\""
# ---------------------------------------------------------------------------
predate() {
  while read -r line ; do
    printf '%(%F %T)T %s\n' -1 "$line"
  done
}

total() {
  tr '\n' '+' | sed -e 's/^/(/' -e 's/\+$/\)/'  | bc -q
}

downloaded_in() {
  for f in "$@" ; do stat -r "$f" | awk '{print ($11 - $12) " seconds"}' ; done
}

ps_owners() {
  local _pid="${1:-$$}"
  local _what_to_print="$2"
  local _skip_pid_1="$3"
  [[ -z "$_what_to_print" ]] && _what_to_print="user"
  [[ -z "$_skip_pid_1" ]] && _skip_pid_1="no"
  [[ $_pid -eq 1 && "$_skip_pid_1" != "no" ]] && return
  read -r _user _ppid _command < <(ps -o user,ppid,command -p "$_pid" | grep -v PPID)
  case "$_what_to_print" in
    pid) echo "$_pid" ;;
    command) echo "$_command" ;;
    *) echo "$_user" ;;
  esac
  [[ $_pid -ne 1 ]] && ps_owners "$_ppid" "$_what_to_print" "$_skip_pid_1"
}

am_i_someone_else() {
  [[ $(ps_owners $$ user skip_pid_1 | uniq | wc -l) -gt 1 ]] && return 0
  return 1
}

# MySQL ---------------------------------------------------------------------
alias mydump="mysqldump --allow-keywords --add-locks --hex-blob --max_allowed_packet=1G --lock-tables=false --lock-all-tables=false --quick --quote-names --complete-insert=false --extended-insert=false"
# Ruby ---------------------------------------------------------------------
alias be="bundle exec"

httpd() {
  port="${1:-8000}"
  command -v open >/dev/null 2>/dev/null && (sleep 1 && open "http://127.0.0.1:$port" &)
  ruby -run -e httpd . -p "$port"
}
# Git ---------------------------------------------------------------------
alias pubgit='git --git-dir="$HOME/.git-pub-dotfiles" --work-tree="$HOME"'
alias prvgit='git --git-dir="$HOME/.git-prv-dotfiles" --work-tree="$HOME"'
alias gst='git status'
alias gcam='git commit --all --verbose --message'
alias gco='git checkout'
alias gps='git push'
alias gpl='git pull'

confsync() {
  cd ~
  for host in "$@" ; do
    pubgit ls-files | rsync -iaxR --files-from=- . "${host//":"/}:"
    prvgit ls-files | rsync -iaxR --files-from=- . "${host//":"/}:"
  done
}

# openssl ---------------------------------------------------------------------
newssl() {
  local h="$1"
  [[ -z $h ]] && return
  local key="${h}.key"
  local req="${h}.req"
  local crt="${h}.crt"
  local pem="${h}.pem"
  cat <<-REQ > "${req}"
      [req]
      distinguished_name = dn
      x509_extensions    = exts
      prompt             = no
      [dn]
      C                  = US
      ST                 = New York
      L                  = Rochester
      OU                 = ${h}
      CN                 = ${h}
      [exts]
      subjectAltName     = @alts
      [alts]
      DNS.1              = ${h}
REQ

  openssl genrsa -out "${key}" 4096 >&/dev/null
  openssl req -new -x509 -days 3650 -utf8 -sha512 -key "${key}" -out "${crt}" -reqexts exts -batch -config "${req}"
  cat "${crt}" "${key}" > "${pem}" && rm "${key}" "${crt}" "${req}"
}

ssl_pin_sha256() {
  local _cert="$1"
  local _tmp="${HOME}/.$$.key"
  openssl x509 -noout -in "${_cert}" -pubkey | openssl asn1parse -noout -inform pem -out "$_tmp"
  openssl dgst -sha256 -binary "$_tmp" | openssl enc -base64
  rm "$_tmp"
}

#-----------------------------------------------------------------------------
for script in "$HOME/.shell-prv" "$HOME/.base16_theme" ; do
  [[ -s "$script" ]] && source "$script"
done
# --------------------------------------------------------------------------
# vim: set syntax=sh ft=sh sw=2 ts=2 expandtab:
